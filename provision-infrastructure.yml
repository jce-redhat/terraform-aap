---
- name: Create AAP infrastructure nodes with terraform
  hosts: '{{ target | default("localhost") }}'

  vars_files:
    - vars/terraform_aap.yml

  tasks:
    - name: Ensure terraform state S3 bucket exists
      amazon.aws.s3_bucket:
        name: '{{ terraform_state_aws_bucket }}'
        state: present
        region: '{{ terraform_state_aws_region }}'
      when: terraform_state_create_bucket | bool

    - name: Create SSH key pair used for AAP instances
      amazon.aws.ec2_key:
        name: '{{ terraform_build_name }}_key'
        region: '{{ terraform_aws_region }}'
        key_type: rsa
      register: _ec2_key
      notify: Write private key file
      when: terraform_create_build_key | bool

    - name: Set Terraform build directory fact
      ansible.builtin.set_fact:
        _tf_builddir: '{{ playbook_dir }}/tf_builds/{{ terraform_build_name }}'

    # cloud.terraform.git_plan seems to assume a plan file will exist
    # in the repo, but plan files may contain sensitive information so
    # check it out directly instead
    - name: Clone terraform AAP infrastructure plan repo
      ansible.builtin.git:
        repo: '{{ terraform_aap_infra_repo }}'
        version: '{{ terraform_aap_infra_repo_version | default(omit) }}'
        dest: '{{ _tf_builddir }}'
        clone: true

    # rather than passing complex_vars to the cloud.terraform.terraform
    # module, create a tfvars file that can be used when also running
    # terraform commands manually
    - name: Create terraform.tfvars file
      ansible.builtin.template:
        src: templates/terraform.tfvars.j2
        dest: '{{ _tf_builddir }}/terraform.tfvars'
        mode: 0644

    - name: Apply terraform AAP infrastructure plan
      cloud.terraform.terraform:
        project_path: '{{ _tf_builddir }}'
        state: present
        force_init: '{{ terraform_force_init | default(false) }}'
        backend_config:
          region: '{{ terraform_state_aws_region }}'
          bucket: '{{ terraform_state_aws_bucket }}'
          key: '{{ terraform_state_aws_bucket_key }}'

    # currently the terraform_provider inventory plugin cannot
    # read remote state, only state from a local file
    - name: Make local copy of terraform state
      # noqa no-changed-when
      # don't use "creates:" to ensure the latest state is always pulled
      ansible.builtin.shell:
        cmd: terraform state pull > local-state-copy.tfstate
        chdir: '{{ _tf_builddir }}'

    - name: Create terraform dynamic inventory
      ansible.builtin.template:
        src: templates/terraform_provider.yml.j2
        dest: '{{ playbook_dir }}/inventory/terraform_provider.yml'
        mode: 0644

  handlers:
    - name: Write private key file
      ansible.builtin.copy:
        content: '{{ _ec2_key.key.private_key }}'
        dest: '{{ playbook_dir }}/tf_builds/{{ terraform_build_name }}_key.pem'
        mode: 0600

...
# vim: ft=yaml.ansible
